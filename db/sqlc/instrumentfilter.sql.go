// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: instrumentfilter.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstrumentfilter = `-- name: CreateInstrumentfilter :one
INSERT INTO instrumentfilter (
    "product_code",
    "exchange_code",
    "instrument_code",
    "underlying_code",
    "filter_option",
    "max_order_qty",
    "max_order_price",
    "max_order_value",
    "buy_limit",
    "sell_limit",
    "exposure_factor",
    "buy_exposure",
    "sell_exposure",
    "buy_qty_limit",
    "buy_qty_exposure",
    "sell_qty_limit",
    "sell_qty_exposure",
    "net_qty_limit",
    "net_qty_exposure",
    "margin_type",
    "Initial_margin",
    "Maintenance_margin",
    "marginable_ratio",
    "margin_curr",
    "commission_type",
    "commission",
    "min_commission",
    "commission_curr",
    "authorized_order_type",
    "trading_curr",
    "price_code",
    "ref_px",
    "ref_px_type",
    "contract_size"
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34
)
RETURNING product_code, exchange_code, instrument_code, underlying_code, filter_option, max_order_qty, max_order_price, max_order_value, buy_limit, sell_limit, exposure_factor, buy_exposure, sell_exposure, buy_qty_limit, buy_qty_exposure, sell_qty_limit, sell_qty_exposure, net_qty_limit, net_qty_exposure, margin_type, "Initial_margin", "Maintenance_margin", marginable_ratio, margin_curr, commission_type, commission, min_commission, commission_curr, authorized_order_type, trading_curr, price_code, ref_px, ref_px_type, contract_size, created_at, updated_at
`

type CreateInstrumentfilterParams struct {
	ProductCode         string         `json:"product_code"`
	ExchangeCode        string         `json:"exchange_code"`
	InstrumentCode      string         `json:"instrument_code"`
	UnderlyingCode      pgtype.Text    `json:"underlying_code"`
	FilterOption        int32          `json:"filter_option"`
	MaxOrderQty         pgtype.Numeric `json:"max_order_qty"`
	MaxOrderPrice       pgtype.Numeric `json:"max_order_price"`
	MaxOrderValue       pgtype.Numeric `json:"max_order_value"`
	BuyLimit            pgtype.Numeric `json:"buy_limit"`
	SellLimit           pgtype.Numeric `json:"sell_limit"`
	ExposureFactor      pgtype.Numeric `json:"exposure_factor"`
	BuyExposure         pgtype.Numeric `json:"buy_exposure"`
	SellExposure        pgtype.Numeric `json:"sell_exposure"`
	BuyQtyLimit         pgtype.Numeric `json:"buy_qty_limit"`
	BuyQtyExposure      pgtype.Numeric `json:"buy_qty_exposure"`
	SellQtyLimit        pgtype.Numeric `json:"sell_qty_limit"`
	SellQtyExposure     pgtype.Numeric `json:"sell_qty_exposure"`
	NetQtyLimit         pgtype.Numeric `json:"net_qty_limit"`
	NetQtyExposure      pgtype.Numeric `json:"net_qty_exposure"`
	MarginType          int32          `json:"margin_type"`
	InitialMargin       pgtype.Numeric `json:"Initial_margin"`
	MaintenanceMargin   pgtype.Numeric `json:"Maintenance_margin"`
	MarginableRatio     pgtype.Numeric `json:"marginable_ratio"`
	MarginCurr          pgtype.Text    `json:"margin_curr"`
	CommissionType      int32          `json:"commission_type"`
	Commission          pgtype.Numeric `json:"commission"`
	MinCommission       pgtype.Numeric `json:"min_commission"`
	CommissionCurr      pgtype.Text    `json:"commission_curr"`
	AuthorizedOrderType int64          `json:"authorized_order_type"`
	TradingCurr         pgtype.Text    `json:"trading_curr"`
	PriceCode           pgtype.Text    `json:"price_code"`
	RefPx               pgtype.Numeric `json:"ref_px"`
	RefPxType           int16          `json:"ref_px_type"`
	ContractSize        pgtype.Numeric `json:"contract_size"`
}

func (q *Queries) CreateInstrumentfilter(ctx context.Context, arg CreateInstrumentfilterParams) (Instrumentfilter, error) {
	row := q.db.QueryRow(ctx, createInstrumentfilter,
		arg.ProductCode,
		arg.ExchangeCode,
		arg.InstrumentCode,
		arg.UnderlyingCode,
		arg.FilterOption,
		arg.MaxOrderQty,
		arg.MaxOrderPrice,
		arg.MaxOrderValue,
		arg.BuyLimit,
		arg.SellLimit,
		arg.ExposureFactor,
		arg.BuyExposure,
		arg.SellExposure,
		arg.BuyQtyLimit,
		arg.BuyQtyExposure,
		arg.SellQtyLimit,
		arg.SellQtyExposure,
		arg.NetQtyLimit,
		arg.NetQtyExposure,
		arg.MarginType,
		arg.InitialMargin,
		arg.MaintenanceMargin,
		arg.MarginableRatio,
		arg.MarginCurr,
		arg.CommissionType,
		arg.Commission,
		arg.MinCommission,
		arg.CommissionCurr,
		arg.AuthorizedOrderType,
		arg.TradingCurr,
		arg.PriceCode,
		arg.RefPx,
		arg.RefPxType,
		arg.ContractSize,
	)
	var i Instrumentfilter
	err := row.Scan(
		&i.ProductCode,
		&i.ExchangeCode,
		&i.InstrumentCode,
		&i.UnderlyingCode,
		&i.FilterOption,
		&i.MaxOrderQty,
		&i.MaxOrderPrice,
		&i.MaxOrderValue,
		&i.BuyLimit,
		&i.SellLimit,
		&i.ExposureFactor,
		&i.BuyExposure,
		&i.SellExposure,
		&i.BuyQtyLimit,
		&i.BuyQtyExposure,
		&i.SellQtyLimit,
		&i.SellQtyExposure,
		&i.NetQtyLimit,
		&i.NetQtyExposure,
		&i.MarginType,
		&i.InitialMargin,
		&i.MaintenanceMargin,
		&i.MarginableRatio,
		&i.MarginCurr,
		&i.CommissionType,
		&i.Commission,
		&i.MinCommission,
		&i.CommissionCurr,
		&i.AuthorizedOrderType,
		&i.TradingCurr,
		&i.PriceCode,
		&i.RefPx,
		&i.RefPxType,
		&i.ContractSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInstrumentfilter = `-- name: DeleteInstrumentfilter :exec
DELETE FROM instrumentfilter
WHERE "instrument_code" = $1
AND "exchange_code" = $2
AND "product_code" = $3
`

type DeleteInstrumentfilterParams struct {
	InstrumentCode string `json:"instrument_code"`
	ExchangeCode   string `json:"exchange_code"`
	ProductCode    string `json:"product_code"`
}

func (q *Queries) DeleteInstrumentfilter(ctx context.Context, arg DeleteInstrumentfilterParams) error {
	_, err := q.db.Exec(ctx, deleteInstrumentfilter, arg.InstrumentCode, arg.ExchangeCode, arg.ProductCode)
	return err
}

const getInstrumentfilter = `-- name: GetInstrumentfilter :one
SELECT product_code, exchange_code, instrument_code, underlying_code, filter_option, max_order_qty, max_order_price, max_order_value, buy_limit, sell_limit, exposure_factor, buy_exposure, sell_exposure, buy_qty_limit, buy_qty_exposure, sell_qty_limit, sell_qty_exposure, net_qty_limit, net_qty_exposure, margin_type, "Initial_margin", "Maintenance_margin", marginable_ratio, margin_curr, commission_type, commission, min_commission, commission_curr, authorized_order_type, trading_curr, price_code, ref_px, ref_px_type, contract_size, created_at, updated_at
FROM instrumentfilter
WHERE "instrument_code" = $1
AND "exchange_code" = $2
AND "product_code" = $3
LIMIT 1
`

type GetInstrumentfilterParams struct {
	InstrumentCode string `json:"instrument_code"`
	ExchangeCode   string `json:"exchange_code"`
	ProductCode    string `json:"product_code"`
}

func (q *Queries) GetInstrumentfilter(ctx context.Context, arg GetInstrumentfilterParams) (Instrumentfilter, error) {
	row := q.db.QueryRow(ctx, getInstrumentfilter, arg.InstrumentCode, arg.ExchangeCode, arg.ProductCode)
	var i Instrumentfilter
	err := row.Scan(
		&i.ProductCode,
		&i.ExchangeCode,
		&i.InstrumentCode,
		&i.UnderlyingCode,
		&i.FilterOption,
		&i.MaxOrderQty,
		&i.MaxOrderPrice,
		&i.MaxOrderValue,
		&i.BuyLimit,
		&i.SellLimit,
		&i.ExposureFactor,
		&i.BuyExposure,
		&i.SellExposure,
		&i.BuyQtyLimit,
		&i.BuyQtyExposure,
		&i.SellQtyLimit,
		&i.SellQtyExposure,
		&i.NetQtyLimit,
		&i.NetQtyExposure,
		&i.MarginType,
		&i.InitialMargin,
		&i.MaintenanceMargin,
		&i.MarginableRatio,
		&i.MarginCurr,
		&i.CommissionType,
		&i.Commission,
		&i.MinCommission,
		&i.CommissionCurr,
		&i.AuthorizedOrderType,
		&i.TradingCurr,
		&i.PriceCode,
		&i.RefPx,
		&i.RefPxType,
		&i.ContractSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstrumentfilterForUpdate = `-- name: GetInstrumentfilterForUpdate :one
SELECT product_code, exchange_code, instrument_code, underlying_code, filter_option, max_order_qty, max_order_price, max_order_value, buy_limit, sell_limit, exposure_factor, buy_exposure, sell_exposure, buy_qty_limit, buy_qty_exposure, sell_qty_limit, sell_qty_exposure, net_qty_limit, net_qty_exposure, margin_type, "Initial_margin", "Maintenance_margin", marginable_ratio, margin_curr, commission_type, commission, min_commission, commission_curr, authorized_order_type, trading_curr, price_code, ref_px, ref_px_type, contract_size, created_at, updated_at
FROM instrumentfilter
WHERE "instrument_code" = $1
AND "exchange_code" = $2
AND "product_code" = $3
LIMIT 1
FOR NO KEY UPDATE
`

type GetInstrumentfilterForUpdateParams struct {
	InstrumentCode string `json:"instrument_code"`
	ExchangeCode   string `json:"exchange_code"`
	ProductCode    string `json:"product_code"`
}

func (q *Queries) GetInstrumentfilterForUpdate(ctx context.Context, arg GetInstrumentfilterForUpdateParams) (Instrumentfilter, error) {
	row := q.db.QueryRow(ctx, getInstrumentfilterForUpdate, arg.InstrumentCode, arg.ExchangeCode, arg.ProductCode)
	var i Instrumentfilter
	err := row.Scan(
		&i.ProductCode,
		&i.ExchangeCode,
		&i.InstrumentCode,
		&i.UnderlyingCode,
		&i.FilterOption,
		&i.MaxOrderQty,
		&i.MaxOrderPrice,
		&i.MaxOrderValue,
		&i.BuyLimit,
		&i.SellLimit,
		&i.ExposureFactor,
		&i.BuyExposure,
		&i.SellExposure,
		&i.BuyQtyLimit,
		&i.BuyQtyExposure,
		&i.SellQtyLimit,
		&i.SellQtyExposure,
		&i.NetQtyLimit,
		&i.NetQtyExposure,
		&i.MarginType,
		&i.InitialMargin,
		&i.MaintenanceMargin,
		&i.MarginableRatio,
		&i.MarginCurr,
		&i.CommissionType,
		&i.Commission,
		&i.MinCommission,
		&i.CommissionCurr,
		&i.AuthorizedOrderType,
		&i.TradingCurr,
		&i.PriceCode,
		&i.RefPx,
		&i.RefPxType,
		&i.ContractSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInstrumentfilter = `-- name: ListInstrumentfilter :many
SELECT product_code, exchange_code, instrument_code, underlying_code, filter_option, max_order_qty, max_order_price, max_order_value, buy_limit, sell_limit, exposure_factor, buy_exposure, sell_exposure, buy_qty_limit, buy_qty_exposure, sell_qty_limit, sell_qty_exposure, net_qty_limit, net_qty_exposure, margin_type, "Initial_margin", "Maintenance_margin", marginable_ratio, margin_curr, commission_type, commission, min_commission, commission_curr, authorized_order_type, trading_curr, price_code, ref_px, ref_px_type, contract_size, created_at, updated_at
FROM instrumentfilter
WHERE "instrument_code" = $1
AND "exchange_code" = $2
AND "product_code" = $3
LIMIT $4
OFFSET $5
`

type ListInstrumentfilterParams struct {
	InstrumentCode string `json:"instrument_code"`
	ExchangeCode   string `json:"exchange_code"`
	ProductCode    string `json:"product_code"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListInstrumentfilter(ctx context.Context, arg ListInstrumentfilterParams) ([]Instrumentfilter, error) {
	rows, err := q.db.Query(ctx, listInstrumentfilter,
		arg.InstrumentCode,
		arg.ExchangeCode,
		arg.ProductCode,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Instrumentfilter{}
	for rows.Next() {
		var i Instrumentfilter
		if err := rows.Scan(
			&i.ProductCode,
			&i.ExchangeCode,
			&i.InstrumentCode,
			&i.UnderlyingCode,
			&i.FilterOption,
			&i.MaxOrderQty,
			&i.MaxOrderPrice,
			&i.MaxOrderValue,
			&i.BuyLimit,
			&i.SellLimit,
			&i.ExposureFactor,
			&i.BuyExposure,
			&i.SellExposure,
			&i.BuyQtyLimit,
			&i.BuyQtyExposure,
			&i.SellQtyLimit,
			&i.SellQtyExposure,
			&i.NetQtyLimit,
			&i.NetQtyExposure,
			&i.MarginType,
			&i.InitialMargin,
			&i.MaintenanceMargin,
			&i.MarginableRatio,
			&i.MarginCurr,
			&i.CommissionType,
			&i.Commission,
			&i.MinCommission,
			&i.CommissionCurr,
			&i.AuthorizedOrderType,
			&i.TradingCurr,
			&i.PriceCode,
			&i.RefPx,
			&i.RefPxType,
			&i.ContractSize,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstrumentfilter = `-- name: UpdateInstrumentfilter :one
UPDATE instrumentfilter
SET "buy_exposure" = $4,
    "sell_exposure" = $5
WHERE "instrument_code" = $1
AND "exchange_code" = $2
AND "product_code" = $3
RETURNING product_code, exchange_code, instrument_code, underlying_code, filter_option, max_order_qty, max_order_price, max_order_value, buy_limit, sell_limit, exposure_factor, buy_exposure, sell_exposure, buy_qty_limit, buy_qty_exposure, sell_qty_limit, sell_qty_exposure, net_qty_limit, net_qty_exposure, margin_type, "Initial_margin", "Maintenance_margin", marginable_ratio, margin_curr, commission_type, commission, min_commission, commission_curr, authorized_order_type, trading_curr, price_code, ref_px, ref_px_type, contract_size, created_at, updated_at
`

type UpdateInstrumentfilterParams struct {
	InstrumentCode string         `json:"instrument_code"`
	ExchangeCode   string         `json:"exchange_code"`
	ProductCode    string         `json:"product_code"`
	BuyExposure    pgtype.Numeric `json:"buy_exposure"`
	SellExposure   pgtype.Numeric `json:"sell_exposure"`
}

func (q *Queries) UpdateInstrumentfilter(ctx context.Context, arg UpdateInstrumentfilterParams) (Instrumentfilter, error) {
	row := q.db.QueryRow(ctx, updateInstrumentfilter,
		arg.InstrumentCode,
		arg.ExchangeCode,
		arg.ProductCode,
		arg.BuyExposure,
		arg.SellExposure,
	)
	var i Instrumentfilter
	err := row.Scan(
		&i.ProductCode,
		&i.ExchangeCode,
		&i.InstrumentCode,
		&i.UnderlyingCode,
		&i.FilterOption,
		&i.MaxOrderQty,
		&i.MaxOrderPrice,
		&i.MaxOrderValue,
		&i.BuyLimit,
		&i.SellLimit,
		&i.ExposureFactor,
		&i.BuyExposure,
		&i.SellExposure,
		&i.BuyQtyLimit,
		&i.BuyQtyExposure,
		&i.SellQtyLimit,
		&i.SellQtyExposure,
		&i.NetQtyLimit,
		&i.NetQtyExposure,
		&i.MarginType,
		&i.InitialMargin,
		&i.MaintenanceMargin,
		&i.MarginableRatio,
		&i.MarginCurr,
		&i.CommissionType,
		&i.Commission,
		&i.MinCommission,
		&i.CommissionCurr,
		&i.AuthorizedOrderType,
		&i.TradingCurr,
		&i.PriceCode,
		&i.RefPx,
		&i.RefPxType,
		&i.ContractSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
