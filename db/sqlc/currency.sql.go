// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: currency.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies
    (
    currency_pair,
    bid,
    ask
    )
VALUES
    (
        $1, $2, $3
)
RETURNING currency_pair, bid, ask, created_at, updated_at
`

type CreateCurrencyParams struct {
	CurrencyPair string         `json:"currency_pair"`
	Bid          pgtype.Numeric `json:"bid"`
	Ask          pgtype.Numeric `json:"ask"`
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, createCurrency, arg.CurrencyPair, arg.Bid, arg.Ask)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currencies
WHERE currency_pair = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, currencyPair string) error {
	_, err := q.db.Exec(ctx, deleteCurrency, currencyPair)
	return err
}

const getCurrency = `-- name: GetCurrency :one
SELECT currency_pair, bid, ask, created_at, updated_at
FROM currencies
WHERE currency_pair = $1
LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, currencyPair string) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrency, currencyPair)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCurrencyForUpdate = `-- name: GetCurrencyForUpdate :one
/*SELECT *
FROM currencies
WHERE currency_pair = $1
LIMIT 1
FOR NO KEY
UPDATE;*/

/*SELECT *
FROM currencies
WHERE currency_pair = $1
LIMIT $2
OFFSET
$3;*/

UPDATE currencies
SET bid = $2,
ask = $3
WHERE currency_pair = $1
RETURNING currency_pair, bid, ask, created_at, updated_at
`

type GetCurrencyForUpdateParams struct {
	CurrencyPair string         `json:"currency_pair"`
	Bid          pgtype.Numeric `json:"bid"`
	Ask          pgtype.Numeric `json:"ask"`
}

func (q *Queries) GetCurrencyForUpdate(ctx context.Context, arg GetCurrencyForUpdateParams) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrencyForUpdate, arg.CurrencyPair, arg.Bid, arg.Ask)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
