// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: currency.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies (
    "currency_pair",
    "bid",
    "ask"
)
VALUES (
    $1, $2, $3
)
RETURNING currency_pair, bid, ask, created_at, updated_at
`

type CreateCurrencyParams struct {
	CurrencyPair string         `json:"currency_pair"`
	Bid          pgtype.Numeric `json:"bid"`
	Ask          pgtype.Numeric `json:"ask"`
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, createCurrency, arg.CurrencyPair, arg.Bid, arg.Ask)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currencies
WHERE "currency_pair" = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, currencyPair string) error {
	_, err := q.db.Exec(ctx, deleteCurrency, currencyPair)
	return err
}

const getCurrency = `-- name: GetCurrency :one
SELECT currency_pair, bid, ask, created_at, updated_at
FROM currencies
WHERE "currency_pair" = $1
LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, currencyPair string) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrency, currencyPair)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCurrencyForUpdate = `-- name: GetCurrencyForUpdate :one
SELECT currency_pair, bid, ask, created_at, updated_at
FROM currencies
WHERE "currency_pair" = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCurrencyForUpdate(ctx context.Context, currencyPair string) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrencyForUpdate, currencyPair)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCurrency = `-- name: ListCurrency :many
SELECT currency_pair, bid, ask, created_at, updated_at
FROM currencies
ORDER BY "currency_pair"
LIMIT $1
OFFSET $2
`

type ListCurrencyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCurrency(ctx context.Context, arg ListCurrencyParams) ([]Currency, error) {
	rows, err := q.db.Query(ctx, listCurrency, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Currency{}
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.CurrencyPair,
			&i.Bid,
			&i.Ask,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE currencies
SET "bid" = $2,
    "ask" = $3
WHERE "currency_pair" = $1
RETURNING currency_pair, bid, ask, created_at, updated_at
`

type UpdateCurrencyParams struct {
	CurrencyPair string         `json:"currency_pair"`
	Bid          pgtype.Numeric `json:"bid"`
	Ask          pgtype.Numeric `json:"ask"`
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, updateCurrency, arg.CurrencyPair, arg.Bid, arg.Ask)
	var i Currency
	err := row.Scan(
		&i.CurrencyPair,
		&i.Bid,
		&i.Ask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
